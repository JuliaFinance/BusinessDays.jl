
# Append this file to your base/userimg.jl and build julia
# in order to add this package to your system image.

using BusinessDays

# SnoopCompile BusinessDays.jl
precompile(Tuple{typeof(BusinessDays.bdays), Array{String, 1}, Array{Base.Dates.Date, 1}, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(Base.resize!), Array{BusinessDays.HolidayCalendar, 1}, Int64})
precompile(Tuple{typeof(Base.copy_to_bitarray_chunks!), Array{UInt64, 1}, Int64, Array{Bool, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(Base, Symbol("##32#33")){Tuple{Symbol}, Int64}, Int64})
precompile(Tuple{typeof(Base.Dates.dayofyear), Int64, Int64, Int64})
precompile(Tuple{typeof(BusinessDays._createbdayscache), BusinessDays.USSettlement, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Base.Cartesian, Symbol("##17#18")){Expr}}, Int64, Int64})
precompile(Tuple{typeof(Base.time_print), UInt64, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.WeekendsOnly})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), String, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Cartesian.exprresolve), Expr})
precompile(Tuple{typeof(BusinessDays._createbdayscache), BusinessDays.UKSettlement, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(Base.ht_keyindex2), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.USSettlement})
precompile(Tuple{typeof(BusinessDays.isholiday), BusinessDays.UKSettlement, Base.Dates.Date})
precompile(Tuple{typeof(Base.unsafe_copy!), Array{Base.Dates.Date, 1}, Int64, Array{Base.Dates.Date, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.BRSettlement})
precompile(Tuple{typeof(Base.prettyprint_getunits), Int64, Int64, Int64})
precompile(Tuple{typeof(Base.Printf.fix_dec), Float64, Int64})
precompile(Tuple{typeof(BusinessDays._createbdayscache), BusinessDays.USNYSE, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays._createbdayscache), BusinessDays.CanadaTSX, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays._createbdayscache), BusinessDays.CompositeHolidayCalendar, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Base.Cartesian, Symbol("##3#4")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.Cartesian.inlineanonymous), Expr, Int64})
precompile(Tuple{typeof(BusinessDays.isholiday), BusinessDays.USGovernmentBond, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays._createbdayscache), BusinessDays.USGovernmentBond, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays._createbdayscache), BusinessDays.CanadaSettlement, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{getfield(BusinessDays, Symbol("#kw##adjustweekendholidayPost")), Array{Any, 1}, typeof(BusinessDays.adjustweekendholidayPost), Base.Dates.Date})
precompile(Tuple{typeof(Base.Cartesian.inlineanonymous), Expr, Int64})
precompile(Tuple{typeof(BusinessDays._createbdayscache), BusinessDays.WeekendsOnly, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(Base.size), Base.StepRange{Base.Dates.Date, Base.Dates.Day}})
precompile(Tuple{typeof(Base.Printf.print_fixed), Base.PipeEndpoint, Int64, Int32, Int32, Bool})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.USGovernmentBond})
precompile(Tuple{typeof(Base.ht_keyindex2), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.UKSettlement})
precompile(Tuple{typeof(Base.Dates.len), Base.Dates.Date, Base.Dates.Date, Base.Dates.Day})
precompile(Tuple{typeof(BusinessDays.bdays), BusinessDays.BRSettlement, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Union{}, Union{}}, Array{Any, 1}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.BrazilExchange})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.UKSettlement})
precompile(Tuple{typeof(BusinessDays.isholiday), BusinessDays.CanadaSettlement, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.isholiday), BusinessDays.BrazilExchange, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.easter_rata), Base.Dates.Year})
precompile(Tuple{getfield(BusinessDays, Symbol("#kw##tobday")), Array{Any, 1}, typeof(BusinessDays.tobday), Array{BusinessDays.HolidayCalendar, 1}, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(Base.copy!), Base.IndexLinear, Array{BusinessDays.HolidayCalendar, 1}, Base.IndexLinear, Array{String, 1}})
precompile(Tuple{typeof(BusinessDays.bdays), BusinessDays.WeekendsOnly, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.isbday), BusinessDays.CompositeHolidayCalendar, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.bdays), BusinessDays.USSettlement, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.isholiday), BusinessDays.TARGET, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.initcache), Array{BusinessDays.HolidayCalendar, 1}, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(Base.next), Base.Generator{Array{Any, 1}, typeof(Base.copy_exprs)}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.CompositeHolidayCalendar})
precompile(Tuple{typeof(Base.ht_keyindex2), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.USNYSE})
precompile(Tuple{typeof(Base.done), Base.StepRange{Base.Dates.Date, Base.Dates.Day}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.CanadaTSX})
precompile(Tuple{typeof(Base.ht_keyindex2), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.CanadaSettlement})
precompile(Tuple{typeof(Base.ht_keyindex2), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.USGovernmentBond})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.USNYSE})
precompile(Tuple{typeof(Base.ht_keyindex2), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.CompositeHolidayCalendar})
precompile(Tuple{typeof(Base.Dates.year), Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.TARGET})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.USSettlement})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Base.Dates.Date, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(BusinessDays.adjustweekendholidayUS), Base.Dates.Date})
precompile(Tuple{typeof(Base.Dates.lastdayofmonth), Base.Dates.Date})
precompile(Tuple{typeof(Base.copy!), Base.IndexLinear, Array{BusinessDays.HolidayCalendar, 1}, Base.IndexLinear, Array{BusinessDays.BRSettlement, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.BitArray{1}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.CanadaSettlement})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.CanadaTSX})
precompile(Tuple{getfield(BusinessDays, Symbol("#kw##tobday")), Array{Any, 1}, typeof(BusinessDays.tobday), String, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.WeekendsOnly})
precompile(Tuple{typeof(Base.next), Base.Generator{Array{Any, 1}, typeof(Base.copy_exprs)}, Int64})
precompile(Tuple{getfield(BusinessDays, Symbol("#kw##tobday")), Array{Any, 1}, typeof(BusinessDays.tobday), String, Base.Dates.Date})
precompile(Tuple{typeof(Base.Cartesian.exprresolve), Expr})
precompile(Tuple{getfield(BusinessDays, Symbol("#kw##tobday")), Array{Any, 1}, typeof(BusinessDays.tobday), Symbol, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(BusinessDays.bdays), Array{BusinessDays.HolidayCalendar, 1}, Array{Base.Dates.Date, 1}, Array{Base.Dates.Date, 1}})
precompile(Tuple{getfield(BusinessDays, Symbol("#kw##tobday")), Array{Any, 1}, typeof(BusinessDays.tobday), Symbol, Base.Dates.Date})
precompile(Tuple{typeof(Base.vcat), Base.UnitRange{Int64}})
precompile(Tuple{typeof(BusinessDays.bdays), BusinessDays.BRSettlement, Array{Base.Dates.Date, 1}, Array{Base.Dates.Date, 1}})
precompile(Tuple{getfield(BusinessDays, Symbol("#kw##tobday")), Array{Any, 1}, typeof(BusinessDays.tobday), BusinessDays.USSettlement, Base.Dates.Date})
precompile(Tuple{typeof(Base.Printf.decode_dec), Float64})
precompile(Tuple{typeof(Base.:(==)), Array{Base.Dates.Date, 1}, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(BusinessDays.symtocalendar), Symbol})
precompile(Tuple{getfield(BusinessDays, Symbol("#kw##tobday")), Array{Any, 1}, typeof(BusinessDays.tobday), BusinessDays.BRSettlement, Base.Dates.Date})
precompile(Tuple{getfield(BusinessDays, Symbol("#kw##tobday")), Array{Any, 1}, typeof(BusinessDays.tobday), BusinessDays.BRSettlement, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Bool, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(BusinessDays.cleancache), Array{BusinessDays.HolidayCalendar, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Base.Cartesian, Symbol("##5#6")){Expr}}, Int64, Int64})
precompile(Tuple{typeof(BusinessDays.listholidays), Symbol, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(Base.copy!), Array{BusinessDays.HolidayCalendar, 1}, Tuple{BusinessDays.BRSettlement, BusinessDays.USSettlement, BusinessDays.UKSettlement}})
precompile(Tuple{typeof(Base._setindex!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.HolidayCalendarCache, BusinessDays.USSettlement, Int64})
precompile(Tuple{typeof(Base.copy!), Array{BusinessDays.HolidayCalendar, 1}, Tuple{BusinessDays.BRSettlement, BusinessDays.USSettlement}})
precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Base.Cartesian, Symbol("##5#6")){Expr}}, Int64, Int64})
precompile(Tuple{typeof(BusinessDays.isbday), Array{BusinessDays.HolidayCalendar, 1}, Array{Base.Dates.Date, 1}})
precompile(Tuple{getfield(BusinessDays, Symbol("##tobday#5")), Bool, typeof(identity), Array{BusinessDays.HolidayCalendar, 1}, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Base.Dates.Day, 1}, Array{Base.Dates.Day, 1}})
precompile(Tuple{typeof(BusinessDays.isbday), BusinessDays.BRSettlement, Array{Base.Dates.Date, 1}})
precompile(Tuple{Type{Base.GC_Diff}, Base.GC_Num, Base.GC_Num})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, Int64})
precompile(Tuple{typeof(BusinessDays.advancebdays), BusinessDays.BRSettlement, Base.Dates.Date, Int64})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.vect), Base.Dates.Day, Base.Dates.Day})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.vect), Bool, Bool})
precompile(Tuple{typeof(Base.vect), Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(Base._setindex!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.HolidayCalendarCache, BusinessDays.BRSettlement, Int64})
precompile(Tuple{typeof(BusinessDays.bdays), BusinessDays.BRSettlement, Base.Dates.Date, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(Base.Dates.month), Int64})
precompile(Tuple{typeof(Base._setindex!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.HolidayCalendarCache, BusinessDays.USNYSE, Int64})
precompile(Tuple{typeof(BusinessDays.advancebdays), String, Base.Dates.Date, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.copy!), Array{BusinessDays.HolidayCalendar, 1}, Tuple{BusinessDays.BRSettlement, BusinessDays.USSettlement, BusinessDays.UKSettlement, BusinessDays.CompositeHolidayCalendar, BusinessDays.USNYSE, BusinessDays.USGovernmentBond}})
precompile(Tuple{typeof(BusinessDays.isholiday), BusinessDays.USSettlement, Base.Dates.Date})
precompile(Tuple{getfield(BusinessDays, Symbol("##tobday#2")), Bool, typeof(identity), BusinessDays.USSettlement, Base.Dates.Date})
precompile(Tuple{Vararg{Any, N} where N})
precompile(Tuple{getfield(BusinessDays, Symbol("##tobday#4")), Bool, typeof(identity), BusinessDays.BRSettlement, Array{Base.Dates.Date, 1}})
precompile(Tuple{getfield(BusinessDays, Symbol("##tobday#2")), Bool, typeof(identity), BusinessDays.BRSettlement, Base.Dates.Date})
precompile(Tuple{typeof(Base._setindex!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.HolidayCalendarCache, BusinessDays.CompositeHolidayCalendar, Int64})
precompile(Tuple{typeof(Base.skip_deleted), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, Int64})
precompile(Tuple{typeof(BusinessDays.listholidays), String, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Base.StepRange{Base.Dates.Date, Base.Dates.Day}, getfield(BusinessDays, Symbol("##8#9")){BusinessDays.BRSettlement}}, Int64, Int64})
precompile(Tuple{typeof(BusinessDays.advancebdays), String, Base.Dates.Date, Array{Int64, 1}})
precompile(Tuple{typeof(Base.fill!), Array{Base.Dates.Date, 1}, Base.Dates.Date})
precompile(Tuple{typeof(Base._setindex!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.HolidayCalendarCache, BusinessDays.CanadaSettlement, Int64})
precompile(Tuple{typeof(Base._setindex!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.HolidayCalendarCache, BusinessDays.UKSettlement, Int64})
precompile(Tuple{typeof(BusinessDays.listbdays), String, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.isholiday), BusinessDays.CompositeHolidayCalendar, Base.Dates.Date})
precompile(Tuple{typeof(Base._delete!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, Int64})
precompile(Tuple{typeof(Base.any), getfield(Base, Symbol("##136#137")){Base.Dates.Date}, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(BusinessDays.isbday), String, Base.Dates.Date})
precompile(Tuple{typeof(Base.fill!), Array{BusinessDays.BRSettlement, 1}, BusinessDays.BRSettlement})
precompile(Tuple{typeof(BusinessDays.advancebdays), BusinessDays.BRSettlement, Base.Dates.Date, Array{Int64, 1}})
precompile(Tuple{typeof(Base._setindex!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.HolidayCalendarCache, BusinessDays.USGovernmentBond, Int64})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_arith), Expr})
precompile(Tuple{typeof(Base._setindex!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.HolidayCalendarCache, BusinessDays.WeekendsOnly, Int64})
precompile(Tuple{typeof(BusinessDays.tobday), String, Base.Dates.Date})
precompile(Tuple{typeof(Base._setindex!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.HolidayCalendarCache, BusinessDays.CanadaTSX, Int64})
precompile(Tuple{getfield(BusinessDays, Symbol("##tobday#2")), Bool, typeof(identity), BusinessDays.WeekendsOnly, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.advancebdays), String, Base.Dates.Date, Int64})
precompile(Tuple{typeof(Base.fill!), Array{String, 1}, String})
precompile(Tuple{typeof(Base.copy!), Base.IndexLinear, Array{BusinessDays.HolidayCalendar, 1}, Base.IndexLinear, Array{Symbol, 1}})
precompile(Tuple{getfield(BusinessDays, Symbol("##adjustweekendholidayPost#1")), Bool, typeof(identity), Base.Dates.Date})
precompile(Tuple{getfield(BusinessDays, Symbol("##tobday#2")), Bool, typeof(identity), BusinessDays.CompositeHolidayCalendar, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.bdays), Symbol, Base.Dates.Date, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(BusinessDays.isholiday), String, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.bdays), String, Array{Base.Dates.Date, 1}, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(BusinessDays.isbday), BusinessDays.CanadaSettlement, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.cleancache), BusinessDays.BRSettlement})
precompile(Tuple{typeof(BusinessDays.bdays), String, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.isbday), BusinessDays.CanadaTSX, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.tobday), Symbol, Base.Dates.Date})
precompile(Tuple{typeof(Base.Dates.yearmonthday), Int64})
precompile(Tuple{typeof(Base.all), getfield(Base, Symbol("##179#181")), Array{Any, 1}})
precompile(Tuple{typeof(BusinessDays.isholiday), BusinessDays.USNYSE, Base.Dates.Date})
precompile(Tuple{typeof(Base.colon), Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.isbday), Array{String, 1}, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(BusinessDays.bdays), Symbol, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.initcache), Array{Symbol, 1}})
precompile(Tuple{typeof(BusinessDays.isbday), BusinessDays.WeekendsOnly, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.initcache), String})
precompile(Tuple{typeof(BusinessDays.tobday), BusinessDays.BRSettlement, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.advancebdays), Symbol, Base.Dates.Date, Int64})
precompile(Tuple{typeof(BusinessDays.bdays), Symbol, Array{Base.Dates.Date, 1}, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(Base.vect), BusinessDays.BRSettlement, Int})
precompile(Tuple{typeof(BusinessDays.initcache), Array{String, 1}})
precompile(Tuple{typeof(BusinessDays.isholiday), BusinessDays.BRSettlement, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.initcache), BusinessDays.BRSettlement})
precompile(Tuple{typeof(BusinessDays.isbday), Symbol, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(BusinessDays.isholiday), Symbol, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.advancebdays), Symbol, Base.Dates.Date, Base.UnitRange{Int64}})
precompile(Tuple{typeof(BusinessDays.initcache), String, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(Base.contains), typeof(Base.:(==)), Array{Base.Dates.Date, 1}, Base.Dates.Date})
precompile(Tuple{typeof(Base.isempty), Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(BusinessDays.cleancache), Array{String, 1}})
precompile(Tuple{typeof(Base.Dates.day), Int64})
precompile(Tuple{typeof(BusinessDays.isbday), String, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(BusinessDays.bdays), Array{Symbol, 1}, Array{Base.Dates.Date, 1}, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(BusinessDays.isholiday), BusinessDays.CanadaTSX, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.cleancache), BusinessDays.UKSettlement})
precompile(Tuple{Type{Base.AssertionError}, String})
precompile(Tuple{typeof(BusinessDays._createbdayscache), BusinessDays.BRSettlement, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(Base.promote_typeof), BusinessDays.BRSettlement, BusinessDays.USSettlement, Int})
precompile(Tuple{typeof(BusinessDays.isbday), Array{Symbol, 1}, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(BusinessDays.advancebdays), Symbol, Base.Dates.Date, Array{Int64, 1}})
precompile(Tuple{typeof(Base.:(==)), Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{Type{Base.Dates.Year}, Int64})
precompile(Tuple{typeof(Base.string), String, Bool, Int})
precompile(Tuple{typeof(BusinessDays.isweekday), Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.cleancache), String})
precompile(Tuple{typeof(Base.remove_linenums!), Bool})
precompile(Tuple{typeof(BusinessDays.tobday), Array{BusinessDays.HolidayCalendar, 1}, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(BusinessDays.isweekend), Base.Dates.Date})
precompile(Tuple{typeof(Base.:(+)), Base.Dates.Date, Base.Dates.Day})
precompile(Tuple{typeof(Base.resize!), Array{BusinessDays.HolidayCalendarCache, 1}, Int64})
precompile(Tuple{getfield(Core.Inference, Symbol("##165#166")){Int64, Array{TypeVar, 1}}, Char})
precompile(Tuple{typeof(BusinessDays.initcache), Symbol})
precompile(Tuple{typeof(Base.gc_num)})
precompile(Tuple{typeof(BusinessDays.bdays), BusinessDays.NullHolidayCalendar, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(Base.setindex!), Array{BusinessDays.HolidayCalendar, 1}, BusinessDays.BRSettlement, Int64})
precompile(Tuple{typeof(BusinessDays.isweekend), Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(Base.promote_typeof), BusinessDays.USSettlement, BusinessDays.UKSettlement, Int})
precompile(Tuple{typeof(Base.Printf.fix_dec), Base.PipeEndpoint, Float64, String, Int64, Int64, Char})
precompile(Tuple{typeof(Base.promote_typeof), BusinessDays.BRSettlement, BusinessDays.USSettlement, BusinessDays.USSettlement})
precompile(Tuple{typeof(Base.unsafe_write), Base.PipeEndpoint, Ptr{UInt8}, Int32})
precompile(Tuple{getfield(Base, Symbol("#@time")), ANY})
precompile(Tuple{typeof(Base.next), Array{Base.Dates.Date, 1}, Int64})
precompile(Tuple{typeof(Base.count), getfield(Base, Symbol("##138#139")), Array{Bool, 1}})
precompile(Tuple{typeof(Base.string), String, UInt32, Int})
precompile(Tuple{Type{Array{BusinessDays.HolidayCalendar, 1}}, Int64})
precompile(Tuple{typeof(Base.promote_typeof), BusinessDays.CompositeHolidayCalendar, BusinessDays.USNYSE, Int})
precompile(Tuple{typeof(BusinessDays.findweekday), Int64, Int64, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Array{BusinessDays.HolidayCalendar, 1}, BusinessDays.UKSettlement, Int64})
precompile(Tuple{typeof(Base.copy_exprs), Expr})
precompile(Tuple{typeof(Base.promote_typeof), BusinessDays.UKSettlement, BusinessDays.CompositeHolidayCalendar, Int})
precompile(Tuple{typeof(Base.length), Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(Base.remove_linenums!), QuoteNode})
precompile(Tuple{typeof(Base.done), Array{Base.Dates.Date, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Base.Dates.Date, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.setindex!), Array{BusinessDays.HolidayCalendar, 1}, BusinessDays.USSettlement, Int64})
precompile(Tuple{typeof(Base.gc_alloc_count), Base.GC_Diff})
precompile(Tuple{Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Base.Cartesian, Symbol("##5#6")){Expr}}})
precompile(Tuple{typeof(Base.copy_exprs), Expr})
precompile(Tuple{typeof(Base.promote_typeof), BusinessDays.USNYSE, BusinessDays.USGovernmentBond, BusinessDays.USGovernmentBond})
precompile(Tuple{typeof(Base.remove_linenums!), String})
precompile(Tuple{Type{Type{T} where T}, Type{Int}})
precompile(Tuple{typeof(Base.copy!), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.copy_exprs)}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Array{Any, 1}})
precompile(Tuple{Type{BusinessDays.CompositeHolidayCalendar}, Array{BusinessDays.HolidayCalendar, 1}})
precompile(Tuple{typeof(Base.convert), Type{BusinessDays.HolidayCalendar}, BusinessDays.CompositeHolidayCalendar})
precompile(Tuple{typeof(Base.:(==)), Base.Dates.Day, Base.Dates.Day})
precompile(Tuple{typeof(Base.print), Base.AbstractIOBuffer{Array{UInt8, 1}}, Base.Dates.Date})
precompile(Tuple{typeof(Base.time_ns)})
precompile(Tuple{typeof(Base.string), BusinessDays.BRSettlement})
precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRange{Base.Dates.Date, Base.Dates.Day}, Tuple{Base.LogicalIndex{Int64, Array{Bool, 1}}}})
precompile(Tuple{typeof(BusinessDays.cleancache), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.fill), Base.Dates.Date, Int64})
precompile(Tuple{typeof(Base.steprange_last), Base.Dates.Date, Base.Dates.Day, Base.Dates.Date})
precompile(Tuple{typeof(Base.copy!), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.copy_exprs)}})
precompile(Tuple{typeof(Base.ht_keyindex2), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.BRSettlement})
precompile(Tuple{typeof(Base.vcat), Base.StepRange{Base.Dates.Date, Base.Dates.Day}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Base.Cartesian, Symbol("##5#6")){Expr}}})
precompile(Tuple{typeof(Base._collect), Type{Any}, Base.Generator{Array{Any, 1}, typeof(Base.copy_exprs)}, Base.HasShape})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Symbol, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.fill), BusinessDays.BRSettlement, Int64})
precompile(Tuple{typeof(BusinessDays.easter_date), Base.Dates.Year})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Symbol, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.fill), String, Int64})
precompile(Tuple{typeof(BusinessDays.bdays), BusinessDays.CompositeHolidayCalendar, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Base.Cartesian, Symbol("##3#4")){Symbol}}})
precompile(Tuple{typeof(Base.Dates.month), Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.initcache), Array{BusinessDays.HolidayCalendar, 1}})
precompile(Tuple{typeof(Base._collect), Type{Any}, Base.Generator{Array{Any, 1}, typeof(Base.copy_exprs)}, Base.HasShape})
precompile(Tuple{typeof(Base.Cartesian._ncall), Int64, Symbol, Symbol, Symbol})
precompile(Tuple{typeof(Base.Cartesian._nexprs), Int64, Expr})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.HolidayCalendarCache, BusinessDays.CanadaTSX})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.HolidayCalendarCache, BusinessDays.CompositeHolidayCalendar})
precompile(Tuple{typeof(BusinessDays.initcache), BusinessDays.USGovernmentBond, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(Base.colon), Base.Dates.Date, Base.Dates.Day, Base.Dates.Date})
precompile(Tuple{typeof(Base.Cartesian._nexprs), Int64, Expr})
precompile(Tuple{typeof(Base.copy), Expr})
precompile(Tuple{typeof(BusinessDays.advancebdays), BusinessDays.BRSettlement, Base.Dates.Date, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.StepRange{Base.Dates.Date, Base.Dates.Day}, getfield(BusinessDays, Symbol("##8#9")){BusinessDays.BRSettlement}}})
precompile(Tuple{typeof(BusinessDays.isbday), Symbol, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.initcache), BusinessDays.USSettlement, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(Base.copy), Expr})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Base.Cartesian, Symbol("##17#18")){Expr}}})
precompile(Tuple{typeof(Base.copy_exprargs), Array{Any, 1}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{typeof(BusinessDays.initcache), BusinessDays.BRSettlement, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.listbdays), BusinessDays.BRSettlement, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.listholidays), BusinessDays.BRSettlement, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Base.StepRange{Base.Dates.Date, Base.Dates.Day}, Base.LogicalIndex{Int64, Array{Bool, 1}}})
precompile(Tuple{typeof(BusinessDays.tobday), Array{String, 1}, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(Base.copy_exprargs), Array{Any, 1}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.HolidayCalendarCache, BusinessDays.USSettlement})
precompile(Tuple{typeof(BusinessDays.bdays), Array{BusinessDays.BRSettlement, 1}, Array{Base.Dates.Date, 1}, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(Base.collect), Base.StepRange{Base.Dates.Date, Base.Dates.Day}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.HolidayCalendarCache, BusinessDays.BRSettlement})
precompile(Tuple{typeof(Base.getindex), Tuple{Symbol}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(BusinessDays.isbday), BusinessDays.BrazilExchange, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.initcache), BusinessDays.UKSettlement, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.initcache), BusinessDays.CanadaSettlement, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.tobday), Array{Symbol, 1}, Array{Base.Dates.Date, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.HolidayCalendarCache, BusinessDays.CanadaSettlement})
precompile(Tuple{typeof(BusinessDays.initcache), BusinessDays.USNYSE, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.initcache), BusinessDays.CompositeHolidayCalendar, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.isbday), BusinessDays.TARGET, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.cleancache)})
precompile(Tuple{typeof(BusinessDays.initcache), BusinessDays.WeekendsOnly, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.HolidayCalendarCache, BusinessDays.UKSettlement})
precompile(Tuple{typeof(BusinessDays.initcache), BusinessDays.CanadaTSX, Base.Dates.Date, Base.Dates.Date})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.HolidayCalendarCache, BusinessDays.USNYSE})
precompile(Tuple{typeof(Base.collect), Type{Any}, Base.Generator{Array{Any, 1}, typeof(Base.copy_exprs)}})
precompile(Tuple{typeof(BusinessDays.isbday), BusinessDays.UKSettlement, Base.Dates.Date})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Array{Any, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.HolidayCalendarCache, BusinessDays.USGovernmentBond})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{BusinessDays.HolidayCalendar, BusinessDays.HolidayCalendarCache}, BusinessDays.HolidayCalendarCache, BusinessDays.WeekendsOnly})
precompile(Tuple{typeof(BusinessDays.isbday), BusinessDays.USGovernmentBond, Base.Dates.Date})
precompile(Tuple{typeof(Base.collect), Type{Any}, Base.Generator{Array{Any, 1}, typeof(Base.copy_exprs)}})
precompile(Tuple{typeof(BusinessDays.isbday), BusinessDays.BRSettlement, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.isbday), BusinessDays.USNYSE, Base.Dates.Date})
precompile(Tuple{typeof(BusinessDays.isbday), BusinessDays.USSettlement, Base.Dates.Date})
precompile(Tuple{typeof(Base.Dates.dayofyear), Base.Dates.Date})
